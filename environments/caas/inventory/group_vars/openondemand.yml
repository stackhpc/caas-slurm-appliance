---
openondemand_auth: basic_pam
openondemand_jupyter_partition: "compute"
openondemand_desktop_partition: "compute"

httpd_listen_addr_port:
  - 80
  - 443

# Allow proxying to compute nodes for apps and control for monitoring only when the grafana group is available
openondemand_host_regex: '({{ openhpc_cluster_name ~ "-compute-\d+)" ~ ( "|(" ~ groups["grafana"][0] ~ ")" if "grafana" in groups else "" ) }}'

# Add grafana to dashboard links to OOD only if grafana group is available
openondemand_dashboard_links_grafana:
  - name: Grafana
    app_name: grafana
    category: Monitoring
    description: Dashboards
    url: "{{ grafana_url_openondemand_proxy }}"
openondemand_dashboard_links: "{{ openondemand_dashboard_links_grafana if 'grafana' in groups else [] }}"

# Add grafana panel to jobs page only if grafana group is available
openondemand_clusters:
  slurm:
    v2:
      metadata:
        title: "{{ openhpc_cluster_name }}" # interpolation here works as openondemand is lexically after openhpc
      login:
        host: "{{ hostvars[groups['login'].0].api_address }}"
        default: true
      job:
        adapter: slurm
        cluster: "{{ openhpc_cluster_name }}"
      batch_connect:
        basic:
          script_wrapper: |-
            module purge
            export PATH=/opt/jupyter/bin/:$PATH
            %s
          set_host: host=$(hostname -s)
        vnc:
          script_wrapper: |-
            module purge
            export PATH=/opt/TurboVNC/bin:$PATH
            # Workaround to avoid "Unable to contact settings server" when
            # lauching xfce4-session
            xfce4-session() { /bin/dbus-launch /bin/xfce4-session $@ ; }
            export -f xfce4-session
            %s
          set_host: host=$(hostname -s)
      custom: "{{ openondemand_clusters_grafana if 'grafana' in groups else {} }}"

grafana_address: "{{ hostvars[groups['grafana'][0]]['api_address'] if 'grafana' in groups else '' }}"
grafana_url_openondemand_proxy: "https://{{ openondemand_servername }}/node/{{ groups['grafana'][0] if 'grafana' in groups else '' }}/{{ grafana_port }}"

openondemand_clusters_grafana: 
  # embed grafana panels in Jobs app: https://osc.github.io/ood-documentation/latest/customization.html#grafana-support
  grafana:
    host: "{{ grafana_url_openondemand_proxy if 'openondemand' in groups else grafana_url_direct }}"
    orgId: 1
    dashboard:
      name: "node-exporter-slurm"
      uid: "node-exporter-slurm"
      panels:
        cpu: 77
        memory: 78
    labels:
      cluster: "cluster"
      host: "host"
      jobid: "jobid"

_opeonondemand_unset_auth: '    RequestHeader unset Authorization'

# Fix grafana proxying for basic auth if anonymous grafana access enabled:
openondemand_node_proxy_directives: "{{ _opeonondemand_unset_auth if (openondemand_auth == 'basic_pam' and 'openondemand_host_regex' and 'grafana' in groups and hostvars[groups['grafana'][0]]._grafana_auth_is_anonymous) else '' }}"
